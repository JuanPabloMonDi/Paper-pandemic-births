xlim(c(2020.8,2022.5))+ #Horizontal limits
ylim(c(min(minlim,-maxlim)),max(-minlim,maxlim))+ #Range of plot
theme(plot.title = element_text(size=10), #Title size
legend.position = legend_position, #Legend position
axis.title.x=element_blank(), #Remove x axis lab
axis.text.x=element_text(angle = 45, vjust = 0.5, hjust=1,size = 5), #Modify x axis values
axis.ticks.y = element_blank(),  # Remove y axis values
axis.title.y = element_blank(), # Remove y labs
axis.ticks.x=element_blank())+ # Remove x ticks
ggtitle(titlee)+  #Add title to the graph
geom_line(data = data.frame(x = c(max(time(prevArima$x)), min(time(prevArima$mean))), y = c(prevArima$x[length(prevArima$x)], prevArima$mean[1])),
aes(x = x, y = y), color = "blue")+ #Fill the hole between the last observation and the first prediction that is made by the autoplot function
labs(x="Year", y="Variation",colour="Values",legend.position = "top")+ #Add names for X and Y axis
geom_vline(xintercept=2020.833,color="#a3a3a3",alpha=0.95)+ #Horizontal line to mark the beginning of pandemic
annotate("text",x = 2021.2, y = maxlim, label = "Pandemic", color = "#a3a3a3",size=2.5,fontface="bold")+  #Add text "Pandemic" to the graph
scale_color_manual(values=c("blue","red"))#Set colors of the legend
return(Graph)}
}
Graph1<-PlotTimeSeries("X07CR1519",data,ylim=NULL)
Graph1<-PlotTimeSeries("X07CR1519",data,ylim="country")
plot(Grafico1)
plot(Graph1)
Graph1<-PlotTimeSeries("X07CR1519",data,ylim=NULL)
Graph1<-PlotTimeSeries("X07CR1519",data,ylim="notCR")
ylim=NULL
Variable<-"X8B2024"
#Select the columns that are for the same country of the Variable
country_columns<-colnames(data)[sapply(colnames(data),country)%in% country(Variable)]
#Now we will adjust the range of the plot, it depends if it wants to be the same for all the countries or not
if (ylim=="country"){
data2<-data[c("Mes",country_columns)]}
data[c("Mes",country_columns)]}
data2<-data[c("Mes",country_columns)]}
data2<-data[c("Mes",country_columns)]
ylim=="country"
data2<-data[c("Mes",Variable)]}else{
#Now we will adjust the range of the plot, it depends if it wants to be the same for all the countries or not
if (is.null(ylim) == T){
data2<-data[c("Mes",Variable)]}else{
if (ylim=="country"){
data2<-data[c("Mes",country_columns)]}
if(ylim =="notCR"){
data2<-data[colnames(data)[sapply(colnames(data),country)!="Cuba"]]
data2<-data2[colnames(data2)[sapply(colnames(data2),country)!="Costa Rica"]]}
}
data2
View(data)
View(data2)
#Here, we a create a function to do an auto ARIMA and plot the result given the column name
# this is used to reduce the length od the code repeating the same process for different variables
PlotTimeSeries<-function(Variable,data, legend=F,tittle=F, ylim="notCR"){
#Variable: The name of the column/variable in the data set
#data: The dataset where the data is going to be obtained
# legend: plot legend in graph
# title: plot an automated title generated with the name, age group and years of study
#Select the columns that are for the same country of the Variable
country_columns<-colnames(data)[sapply(colnames(data),country)%in% country(Variable)]
#Now we will adjust the range of the plot, it depends if it wants to be the same for all the countries or not
if (is.null(ylim) == T){
data2<-data[c("Mes",Variable)]}else{
if (ylim=="country"){
data2<-data[c("Mes",country_columns)]}
if(ylim =="notCR"){
data2<-data[colnames(data)[sapply(colnames(data),country)!="Cuba"]]
data2<-data2[colnames(data2)[sapply(colnames(data2),country)!="Costa Rica"]]}
}
if (is.null(ylim)==T){
maxlim<-max(data2[data2$Mes>"2020-10",][2:ncol(data2)], na.rm = T)+20
minlim<-min(data2[data2$Mes>"2020-10",][2:ncol(data2)], na.rm = T)-20
}else{
if (ylim%in%c("country","notCR")){
maxlim<-max(data2[data2$Mes>"2020-10",][2:ncol(data2)], na.rm = T)+20
minlim<-min(data2[data2$Mes>"2020-10",][2:ncol(data2)], na.rm = T)-20
}else{if (ylim=="all"){
maxlim<-max(data[data$Mes>"2020-10",][2:ncol(data)], na.rm = T)+20
minlim<-min(data[data$Mes>"2020-10",][2:ncol(data)], na.rm = T)-20
}else{
maxlim<-ylim[2]
minlim<-ylim[1]}}}
#Just in case there is no data available in the selected column
if (nrow(data[!is.na(data[Variable]),][Variable])==0){return(ggplot() +
labs(x = "", y = "", title = "")+
annotate("text",x = 2021.665, y = (maxlim-minlim)/2, size = 10, label="No info",color = "black")+
xlim(c(2020.83,2022.5))+ #Os limites horizontais do Graph
ylim(c(minlim-10,maxlim+10)) #Os limites verticais do Graph
)}else{
#now, we make the arima process
train_data = ts(data[Variable], start = c(2012,1), end = c(2020,10), frequency = 12)
data_ts = ts(data[Variable], start = c(2012,1), end = c(2022,12), frequency = 12)
tedata = window(data_ts, start=c(2020,11), end=c(2022,12))
ModArima = auto.arima(train_data, trace = T, stepwise = F, approximation = F)
prevArima=forecast(ModArima, h=36)
accuracy(prevArima)
#If true, we add the title and legend to the plot
titles<-info_variable(Variable)
if (tittle==T){
titlee<-paste("Women between ",titles[[3]],"-",titles[[4]]," with ",titles[[1]],"years of studies - ",titles[[2]])
}else{titlee=" "}
if (legend==T){
legend_position="bottom"
}else{legend_position="none"}
Graph<-autoplot(prevArima,color="blue",series="Forecast") + #plot time series
autolayer(tedata,series="Observed",colour = T)+ #plot observed data
autolayer(prevArima$mean,series="Forecast",colour=T)+ #plot predicted data
xlim(c(2020.8,2022.5))+ #Horizontal limits
ylim(c(min(minlim,-maxlim)),max(-minlim,maxlim))+ #Range of plot
theme(plot.title = element_text(size=10), #Title size
legend.position = legend_position, #Legend position
axis.title.x=element_blank(), #Remove x axis lab
axis.text.x=element_text(angle = 45, vjust = 0.5, hjust=1,size = 5), #Modify x axis values
axis.ticks.y = element_blank(),  # Remove y axis values
axis.title.y = element_blank(), # Remove y labs
axis.ticks.x=element_blank())+ # Remove x ticks
ggtitle(titlee)+  #Add title to the graph
geom_line(data = data.frame(x = c(max(time(prevArima$x)), min(time(prevArima$mean))), y = c(prevArima$x[length(prevArima$x)], prevArima$mean[1])),
aes(x = x, y = y), color = "blue")+ #Fill the hole between the last observation and the first prediction that is made by the autoplot function
labs(x="Year", y="Variation",colour="Values",legend.position = "top")+ #Add names for X and Y axis
geom_vline(xintercept=2020.833,color="#a3a3a3",alpha=0.95)+ #Horizontal line to mark the beginning of pandemic
annotate("text",x = 2021.2, y = maxlim, label = "Pandemic", color = "#a3a3a3",size=2.5,fontface="bold")+  #Add text "Pandemic" to the graph
scale_color_manual(values=c("blue","red"))#Set colors of the legend
return(Graph)}
}
Graph2<-PlotTimeSeries("X07M2024",data, ylim="country")
get_only_legend <- function(plot) {
# get tabular interpretation of plot
plot_table <- ggplot_gtable(ggplot_build(plot))
#  Mark only legend in plot
legend_plot <- which(sapply(plot_table$grobs, function(x) x$name) == "guide-box")
# extract legend
legend <- plot_table$grobs[[legend_plot]]
# return legend
return(legend)
}
Graph4<-PlotTimeSeries("X07CR3034",data, ylim=c(-100,100))
ylim=c(-100,100)
class(ylim)
#Now we will adjust the range of the plot, it depends if it wants to be the same for all the countries or not
if (class(ylim)=="numeric"){maxlim<-ylim[2]
minlim<-ylim[1]}
if (is.null(ylim) == T){
data2<-data[c("Mes",Variable)]}else{
if (ylim=="country"){
data2<-data[c("Mes",country_columns)]}
if(ylim =="notCR"){
data2<-data[colnames(data)[sapply(colnames(data),country)!="Cuba"]]
data2<-data2[colnames(data2)[sapply(colnames(data2),country)!="Costa Rica"]]}
}
#Now we will adjust the range of the plot, it depends if it wants to be the same for all the countries or not
if (class(ylim)=="numeric"){maxlim<-ylim[2]
minlim<-ylim[1]}else{
if (is.null(ylim) == T){
data2<-data[c("Mes",Variable)]}else{
if (ylim=="country"){
data2<-data[c("Mes",country_columns)]}
if(ylim =="notCR"){
data2<-data[colnames(data)[sapply(colnames(data),country)!="Cuba"]]
data2<-data2[colnames(data2)[sapply(colnames(data2),country)!="Costa Rica"]]}
}
if (is.null(ylim)==T){
maxlim<-max(data2[data2$Mes>"2020-10",][2:ncol(data2)], na.rm = T)+20
minlim<-min(data2[data2$Mes>"2020-10",][2:ncol(data2)], na.rm = T)-20
}else{
if (ylim%in%c("country","notCR")){
maxlim<-max(data2[data2$Mes>"2020-10",][2:ncol(data2)], na.rm = T)+20
minlim<-min(data2[data2$Mes>"2020-10",][2:ncol(data2)], na.rm = T)-20
}else{if (ylim=="all"){
maxlim<-max(data[data$Mes>"2020-10",][2:ncol(data)], na.rm = T)+20
minlim<-min(data[data$Mes>"2020-10",][2:ncol(data)], na.rm = T)-20
}}}}
class(ylim)
maxlim
ylim="all"
#Now we will adjust the range of the plot, it depends if it wants to be the same for all the countries or not
if (class(ylim)=="numeric"){maxlim<-ylim[2]
minlim<-ylim[1]}else{
if (is.null(ylim) == T){
data2<-data[c("Mes",Variable)]}else{
if (ylim=="country"){
data2<-data[c("Mes",country_columns)]}
if(ylim =="notCR"){
data2<-data[colnames(data)[sapply(colnames(data),country)!="Cuba"]]
data2<-data2[colnames(data2)[sapply(colnames(data2),country)!="Costa Rica"]]}
}
if (is.null(ylim)==T){
maxlim<-max(data2[data2$Mes>"2020-10",][2:ncol(data2)], na.rm = T)+20
minlim<-min(data2[data2$Mes>"2020-10",][2:ncol(data2)], na.rm = T)-20
}else{
if (ylim%in%c("country","notCR")){
maxlim<-max(data2[data2$Mes>"2020-10",][2:ncol(data2)], na.rm = T)+20
minlim<-min(data2[data2$Mes>"2020-10",][2:ncol(data2)], na.rm = T)-20
}else{if (ylim=="all"){
maxlim<-max(data[data$Mes>"2020-10",][2:ncol(data)], na.rm = T)+20
minlim<-min(data[data$Mes>"2020-10",][2:ncol(data)], na.rm = T)-20
}}}}
ylim="notCR"
#Now we will adjust the range of the plot, it depends if it wants to be the same for all the countries or not
if (class(ylim)=="numeric"){maxlim<-ylim[2]
minlim<-ylim[1]}else{
if (is.null(ylim) == T){
data2<-data[c("Mes",Variable)]}else{
if (ylim=="country"){
data2<-data[c("Mes",country_columns)]}
if(ylim =="notCR"){
data2<-data[colnames(data)[sapply(colnames(data),country)!="Cuba"]]
data2<-data2[colnames(data2)[sapply(colnames(data2),country)!="Costa Rica"]]}
}
if (is.null(ylim)==T){
maxlim<-max(data2[data2$Mes>"2020-10",][2:ncol(data2)], na.rm = T)+20
minlim<-min(data2[data2$Mes>"2020-10",][2:ncol(data2)], na.rm = T)-20
}else{
if (ylim%in%c("country","notCR")){
maxlim<-max(data2[data2$Mes>"2020-10",][2:ncol(data2)], na.rm = T)+20
minlim<-min(data2[data2$Mes>"2020-10",][2:ncol(data2)], na.rm = T)-20
}else{if (ylim=="all"){
maxlim<-max(data[data$Mes>"2020-10",][2:ncol(data)], na.rm = T)+20
minlim<-min(data[data$Mes>"2020-10",][2:ncol(data)], na.rm = T)-20
}}}}
PlotTimeSeries<-function(Variable,data, legend=F,tittle=F, ylim="notCR"){
#Variable: The name of the column/variable in the data set
#data: The dataset where the data is going to be obtained
# legend: plot legend in graph
# title: plot an automated title generated with the name, age group and years of study
#ylim: a vector of length 2 which values are used to adjust the range on the plot the graph. If NULL, it will only consider the variable in the function.
#     If "country" it will consider all time series referring to the same country to adjust ylim on the plot
#     If "all" it will consider all the countries in dataset. if "notCR" it wont consider neither Cuba or Costa Rica (this because their variations are very high)
#Select the columns that are for the same country of the Variable
country_columns<-colnames(data)[sapply(colnames(data),country)%in% country(Variable)]
#Now we will adjust the range of the plot, it depends if it wants to be the same for all the countries or not
if (class(ylim)=="numeric"){maxlim<-ylim[2]
minlim<-ylim[1]}else{
if (is.null(ylim) == T){
data2<-data[c("Mes",Variable)]}else{
if (ylim=="country"){
data2<-data[c("Mes",country_columns)]}
if(ylim =="notCR"){
data2<-data[colnames(data)[sapply(colnames(data),country)!="Cuba"]]
data2<-data2[colnames(data2)[sapply(colnames(data2),country)!="Costa Rica"]]}
}
if (is.null(ylim)==T){
maxlim<-max(data2[data2$Mes>"2020-10",][2:ncol(data2)], na.rm = T)+20
minlim<-min(data2[data2$Mes>"2020-10",][2:ncol(data2)], na.rm = T)-20
}else{
if (ylim%in%c("country","notCR")){
maxlim<-max(data2[data2$Mes>"2020-10",][2:ncol(data2)], na.rm = T)+20
minlim<-min(data2[data2$Mes>"2020-10",][2:ncol(data2)], na.rm = T)-20
}else{if (ylim=="all"){
maxlim<-max(data[data$Mes>"2020-10",][2:ncol(data)], na.rm = T)+20
minlim<-min(data[data$Mes>"2020-10",][2:ncol(data)], na.rm = T)-20
}}}}
#Just in case there is no data available in the selected column
if (nrow(data[!is.na(data[Variable]),][Variable])==0){return(ggplot() +
labs(x = "", y = "", title = "")+
annotate("text",x = 2021.665, y = (maxlim-minlim)/2, size = 10, label="No info",color = "black")+
xlim(c(2020.83,2022.5))+ #Os limites horizontais do Graph
ylim(c(minlim-10,maxlim+10)) #Os limites verticais do Graph
)}else{
#now, we make the arima process
train_data = ts(data[Variable], start = c(2012,1), end = c(2020,10), frequency = 12)
data_ts = ts(data[Variable], start = c(2012,1), end = c(2022,12), frequency = 12)
tedata = window(data_ts, start=c(2020,11), end=c(2022,12))
ModArima = auto.arima(train_data, trace = T, stepwise = F, approximation = F)
prevArima=forecast(ModArima, h=36)
accuracy(prevArima)
#If true, we add the title and legend to the plot
titles<-info_variable(Variable)
if (tittle==T){
titlee<-paste("Women between ",titles[[3]],"-",titles[[4]]," with ",titles[[1]],"years of studies - ",titles[[2]])
}else{titlee=" "}
if (legend==T){
legend_position="bottom"
}else{legend_position="none"}
Graph<-autoplot(prevArima,color="blue",series="Forecast") + #plot time series
autolayer(tedata,series="Observed",colour = T)+ #plot observed data
autolayer(prevArima$mean,series="Forecast",colour=T)+ #plot predicted data
xlim(c(2020.8,2022.5))+ #Horizontal limits
ylim(c(min(minlim,-maxlim)),max(-minlim,maxlim))+ #Range of plot
theme(plot.title = element_text(size=10), #Title size
legend.position = legend_position, #Legend position
axis.title.x=element_blank(), #Remove x axis lab
axis.text.x=element_text(angle = 45, vjust = 0.5, hjust=1,size = 5), #Modify x axis values
axis.ticks.y = element_blank(),  # Remove y axis values
axis.title.y = element_blank(), # Remove y labs
axis.ticks.x=element_blank())+ # Remove x ticks
ggtitle(titlee)+  #Add title to the graph
geom_line(data = data.frame(x = c(max(time(prevArima$x)), min(time(prevArima$mean))), y = c(prevArima$x[length(prevArima$x)], prevArima$mean[1])),
aes(x = x, y = y), color = "blue")+ #Fill the hole between the last observation and the first prediction that is made by the autoplot function
labs(x="Year", y="Variation",colour="Values",legend.position = "top")+ #Add names for X and Y axis
geom_vline(xintercept=2020.833,color="#a3a3a3",alpha=0.95)+ #Horizontal line to mark the beginning of pandemic
annotate("text",x = 2021.2, y = maxlim, label = "Pandemic", color = "#a3a3a3",size=2.5,fontface="bold")+  #Add text "Pandemic" to the graph
scale_color_manual(values=c("blue","red"))#Set colors of the legend
return(Graph)}
}
Graph4<-PlotTimeSeries("X07CH2029",data, ylim=c(-100,100))
Graph4<-PlotTimeSeries("X8CH2029",data, ylim=c(-100,100))
Variable<-"X8CH2029"
Graph4<-PlotTimeSeries("X8CH2529",data, ylim=c(-100,100))
plot(Graph4)
# Create row and column titles
col.titles = unlist(unique(datainfo$Age))
row.titles = unlist(unique(datainfo$Education_level))
legenda<-get_only_legend(PlotTimeSeries("X12B40",data,legend = T))
plot(legenda)
View(datainfo)
library(ppcor)
library(FOCI)
library(dplyr)
library(XICOR)
library(forecast)
library(minerva)
### set seed for replicability -------------------
set.seed(131101)
x1<-arima.sim(list(2,1,1),n=1000)
x2<-arima.sim(list(3,0,0),n=1000)
y<- exp(x1)+rnorm(1000,sd=0.2)
cor(x1,y,method="spearman")
x1<-runif(20000,2,4)
x2<-runif(20000,-2,6)
z<-runif(20000,10,50)
x3<-runif(20000,0,2)
y<-x1+x2+rnorm(1000,mean=0,sd=0.1) %%1
symxi<-function(X,Y){max(xi(X,Y),xi(Y,X))}
symxi(y,x)
symxi<-function(X,Y){max(calculateXI(X,Y),xi(Y,X))}
symxi(y,x)
symxi(y,x1)
symxi<-function(X,Y){max(calculateXI(X,Y),calculateXI(Y,X))}
symxi(y,x1)
symxi<-function(X,Y){max(xicor(X,Y),xicor(Y,X))}
symxi(y,x1)
autocor<-function(SerieX, lag.max=30, method="pearson",plot=TRUE){
if (method=="codec"){
autocorrelacionesmanual<-c()
for (i in 0:lag.max){
rho<-codec(SerieX[1:(length(SerieX)-i)],SerieX[(i+1):length(SerieX)])
autocorrelacionesmanual<-append(autocorrelacionesmanual,rho)
}
autocorrelacionesmanual<-data.frame(autocorrelacionesmanual)
}
if(method=="xi"){
autocorrelacionesmanual<-c()
for (i in 0:lag.max){
rho<-xicor(SerieX[1:(length(SerieX)-i)],SerieX[(i+1):length(SerieX)])
autocorrelacionesmanual<-append(autocorrelacionesmanual,rho)
}
autocorrelacionesmanual<-data.frame(autocorrelacionesmanual)
}
if(method=="symxi"){
autocorrelacionesmanual<-c()
for (i in 0:lag.max){
rho<-symxi(SerieX[1:(length(SerieX)-i)],SerieX[(i+1):length(SerieX)])
autocorrelacionesmanual<-append(autocorrelacionesmanual,rho)
}
autocorrelacionesmanual<-data.frame(autocorrelacionesmanual)
}
if(method=="kendall"){
autocorrelacionesmanual<-c()
for (i in 0:lag.max){
rho<-cor(SerieX[1:(length(SerieX)-i)],SerieX[(i+1):length(SerieX)],method="kendall")
autocorrelacionesmanual<-append(autocorrelacionesmanual,rho)
}
autocorrelacionesmanual<-data.frame(autocorrelacionesmanual)
}else{
if (method=="pearson"| method=="spearman"){
if(method=="spearman"){SerieX<-rank(SerieX)}
media<-mean(SerieX)
autocorrelacionesmanual<-c()
for (i in 0:lag.max){
suma=0
for (j in (i+1):length(SerieX)){
suma<-suma+(SerieX[j]-media)*(SerieX[j-i]-media)}
rho<-suma/sum((SerieX-mean(SerieX))^2)
autocorrelacionesmanual<-append(autocorrelacionesmanual,rho)}
autocorrelacionesmanual<-data.frame(autocorrelacionesmanual)
}}
if (plot==TRUE){
plot(0:lag.max,autocorrelacionesmanual$autocorrelacionesmanual,
main=paste("ACF Time Series -",method),
ylab="ACF",
xlab="lag",type="n")+
abline(h=0,col="black")+
segments(0:(nrow(autocorrelacionesmanual)-1),
rep(0,nrow(autocorrelacionesmanual)),
0:(nrow(autocorrelacionesmanual)-1),
autocorrelacionesmanual$autocorrelacionesmanual, col="black")
}
return(autocorrelacionesmanual)
}
SerieX<-arima.sim(list(order=c(1,0,1),ar=0.8,ma=0.4),n=2000)
X<-c(rnorm(1,0.5,0.25))
error0<-rnorm(1,0,0.2)
error1<-rnorm(1,0,0.2)
error2<-rnorm(1,0,0.2)
for (i in 1:2000){
error3<-rnorm(1,0,0.2)
nuevox<-0.4*error0+0.8*error1+0.3*(error2)+error3
error0<-error1
error1<-error2
error2<-error3
X<-append(X,nuevox)
}
autocor(X,method="kendall")
autocor(X,method="spearman")
autocor(X,method="pearson")
autocor(X,method="codec")
autocor(X,method="xi")
autocor(X,method = "symxi")
X<-c(rnorm(1,0.5,0.25))
error0<-rnorm(1,0,0.2)
error1<-rnorm(1,0,0.2)
error2<-rnorm(1,0,0.2)
for (i in 1:2000){
error3<-rnorm(1,0,0.2)
nuevox<-0.4*error0+0.8*error1+0.3*log(error2)+error3
error0<-error1
error1<-error2
error2<-error3
X<-append(X,nuevox)
}
X<-c(rnorm(1,0.5,0.25))
error0<-rnorm(1,0,0.2)
error1<-rnorm(1,0,0.2)
error2<-rnorm(1,0,0.2)
for (i in 1:2000){
error3<-rnorm(1,0,0.2)
nuevox<-0.4*error0+0.8*error1+0.3*log(abs(error2))+error3
error0<-error1
error1<-error2
error2<-error3
X<-append(X,nuevox)
}
autocor(X,method="kendall")
autocor(X,method="spearman")
autocor(X,method="pearson")
autocor(X,method="codec")
autocor(X,method="xi")
autocor(X,method = "symxi")
X<-c(rnorm(1,0.5,0.25))
error0<-rnorm(1,0,0.2)
error1<-rnorm(1,0,0.2)
error2<-rnorm(1,0,0.2)
for (i in 1:2000){
error3<-rnorm(1,0,0.2)
nuevox<-0.4*error0+0.8*error1+0.3*(error2)^2+error3
error0<-error1
error1<-error2
error2<-error3
X<-append(X,nuevox)
}
autocor<-function(SerieX, lag.max=30, method="pearson",plot=TRUE){
if (method=="codec"){
autocorrelacionesmanual<-c()
for (i in 0:lag.max){
rho<-codec(SerieX[1:(length(SerieX)-i)],SerieX[(i+1):length(SerieX)])
autocorrelacionesmanual<-append(autocorrelacionesmanual,rho)
}
autocorrelacionesmanual<-data.frame(autocorrelacionesmanual)
}
if(method=="xi"){
autocorrelacionesmanual<-c()
for (i in 0:lag.max){
rho<-xicor(SerieX[1:(length(SerieX)-i)],SerieX[(i+1):length(SerieX)])
autocorrelacionesmanual<-append(autocorrelacionesmanual,rho)
}
autocorrelacionesmanual<-data.frame(autocorrelacionesmanual)
}
if(method=="symxi"){
autocorrelacionesmanual<-c()
for (i in 0:lag.max){
rho<-symxi(SerieX[1:(length(SerieX)-i)],SerieX[(i+1):length(SerieX)])
autocorrelacionesmanual<-append(autocorrelacionesmanual,rho)
}
autocorrelacionesmanual<-data.frame(autocorrelacionesmanual)
}
if(method=="kendall"){
autocorrelacionesmanual<-c()
for (i in 0:lag.max){
rho<-cor(SerieX[1:(length(SerieX)-i)],SerieX[(i+1):length(SerieX)],method="kendall")
autocorrelacionesmanual<-append(autocorrelacionesmanual,rho)
}
autocorrelacionesmanual<-data.frame(autocorrelacionesmanual)
}else{
if (method=="pearson"| method=="spearman"){
if(method=="spearman"){SerieX<-rank(SerieX)}
media<-mean(SerieX)
autocorrelacionesmanual<-c()
for (i in 0:lag.max){
suma=0
for (j in (i+1):length(SerieX)){
suma<-suma+(SerieX[j]-media)*(SerieX[j-i]-media)}
rho<-suma/sum((SerieX-mean(SerieX))^2)
autocorrelacionesmanual<-append(autocorrelacionesmanual,rho)}
autocorrelacionesmanual<-data.frame(autocorrelacionesmanual)
}}
if (plot==TRUE){
plot(0:lag.max,autocorrelacionesmanual$autocorrelacionesmanual,
main=paste("ACF Time Series -",method),
ylab="ACF",
xlab="lag",type="n")+
abline(h=0,col="black")+
segments(0:(nrow(autocorrelacionesmanual)-1),
rep(0,nrow(autocorrelacionesmanual)),
0:(nrow(autocorrelacionesmanual)-1),
autocorrelacionesmanual$autocorrelacionesmanual, col="black")
}
return(autocorrelacionesmanual)
}
autocor(X,method="kendall")
autocor(X,method="spearman")
autocor(X,method="pearson")
autocor(X,method="codec")
autocor(X,method="xi")
autocor(X,method = "symxi")
